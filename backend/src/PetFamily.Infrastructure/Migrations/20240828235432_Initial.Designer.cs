// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetFamily.Infrastructure;

#nullable disable

namespace PetFamily.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240828235432_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetFamily.Domain.Modules.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("AssistanceStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ASSISTANCE_STATUS");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("BREED");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("COLOR");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DATE_OF_CREATION");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HealthInformation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("HEALTH_INFORMATION");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("HEIGHT");

                    b.Property<bool>("IsCastrated")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_CASTRATED");

                    b.Property<bool>("IsVaccination")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_VACCINATION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TYPE");

                    b.Property<Guid?>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("VOLUNTEER_ID");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("WEIGHT");

                    b.HasKey("Id")
                        .HasName("PK_PET");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("IX_PET_VOLUNTEER_ID");

                    b.ToTable("pet", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.PetPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_MAIN");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("PET_ID");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("STORAGE");

                    b.HasKey("Id")
                        .HasName("PK_PETPHOTO");

                    b.HasIndex("PetId")
                        .HasDatabaseName("IX_PETPHOTO_PET_ID");

                    b.ToTable("petphoto", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.RequisitePet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("PET_ID");

                    b.HasKey("Id")
                        .HasName("PK_REQUISITE_PET");

                    b.HasIndex("PetId")
                        .HasDatabaseName("IX_REQUISITE_PET_PET_ID");

                    b.ToTable("REQUISITE_PET", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.RequisiteVolunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("VOLUNTEER_ID");

                    b.HasKey("Id")
                        .HasName("PK_REQUISITE_VOLUNTEER");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("IX_REQUISITE_VOLUNTEER_VOLUNTEER_ID");

                    b.ToTable("REQUISITE_VOLUNTEER", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.SocialNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("URL");

                    b.Property<Guid?>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("VOLUNTEER_ID");

                    b.HasKey("Id")
                        .HasName("PK_SOCIAL_NETWORK");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("IX_SOCIAL_NETWORK_VOLUNTEER_ID");

                    b.ToTable("SOCIAL_NETWORK", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<int>("CountOfHomelessAnimals")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT_OF_HOMELESS_ANIMALS");

                    b.Property<int>("CountOfIllAnimals")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT_OF_ILL_ANIMALS");

                    b.Property<int>("CountOfShelterAnimals")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT_OF_SHELTER_ANIMALS");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FULL_NAME");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("YEARS_OF_EXPERIENCE");

                    b.HasKey("Id")
                        .HasName("PK_VOLUNTEER");

                    b.ToTable("volunteer", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.Pet", b =>
                {
                    b.HasOne("PetFamily.Domain.Modules.Volunteer", null)
                        .WithMany("Pets")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PET_VOLUNTEERS_VOLUNTEER_ID");
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.PetPhoto", b =>
                {
                    b.HasOne("PetFamily.Domain.Modules.Pet", null)
                        .WithMany("PetPhoto")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PETPHOTO_PET_PET_ID");
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.RequisitePet", b =>
                {
                    b.HasOne("PetFamily.Domain.Modules.Pet", null)
                        .WithMany("Requisite")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_REQUISITE_PET_PET_PET_ID");
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.RequisiteVolunteer", b =>
                {
                    b.HasOne("PetFamily.Domain.Modules.Volunteer", null)
                        .WithMany("Requisite")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_REQUISITE_VOLUNTEER_VOLUNTEERS_VOLUNTEER_ID");
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.SocialNetwork", b =>
                {
                    b.HasOne("PetFamily.Domain.Modules.Volunteer", null)
                        .WithMany("SocialNetworks")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_SOCIAL_NETWORK_VOLUNTEERS_VOLUNTEER_ID");
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.Pet", b =>
                {
                    b.Navigation("PetPhoto");

                    b.Navigation("Requisite");
                });

            modelBuilder.Entity("PetFamily.Domain.Modules.Volunteer", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("Requisite");

                    b.Navigation("SocialNetworks");
                });
#pragma warning restore 612, 618
        }
    }
}
